package apna_college_backtracking;

public class knight_problem {
	public static boolean isSafe(int arr[][],int row,int col) {
		if(row<0||row==arr.length||col<0||col==arr.length||arr[row][col]>0)
			return false;
		
		return true;
	}
	public static void knight(int arr[][],int row,int col,int move) {
		
		if(isSafe(arr,row,col)==true) {
			//base cond.
			if(arr[row][col]>=((arr.length*arr.length)-1)) {
				print(arr);
				return;
			}			
		    
			
			//kaam		
			arr[row][col]=move;
			knight(arr,row-2,col+1,move+1);
			knight(arr,row-1,col+2,move+1);
			knight(arr,row+1,col+2,move+1);
			knight(arr,row+2,col+1,move+1);
			knight(arr,row+2,col-1,move+1);
			knight(arr,row+1,col-2,move+1);
			knight(arr,row-1,col-2,move+1);
			knight(arr,row-2,col-1,move+1);
			arr[row][col]=0;
		}
		else
			return;
			
		//}
	}
	public static void print(int arr[][]) {
		System.out.println("----chess board----");
		for(int i=0;i<arr.length;i++) {
			for(int j=0;j<arr.length;j++)
				System.out.print(arr[i][j]+" ");
			System.out.println();
		}
	}
	public static void main(String args[]) {
		int n=8;
		int arr[][]=new int[n][n];
		knight(arr,0,0,0);
	}
}
